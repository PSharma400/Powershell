210127---> AZ-040T00: Automating Administration with PowerShell

Day1 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


LET Portal(Student Portal) Login: Training details are available on this portal (Meeting Links, Recording Links, Reference Links, Qubits etc.)
      Link:----- https://www.mykoenig.com/
      Credentials Details:---- Email ID: Your Corporate Email ID, Password: 210127

Achievement URL:
 https://learn.microsoft.com/en-us/users/me/achievements?WT.mc_id=ilt_partner_webpage_wwl&ocid=3351797&redeem=LMYPMV



DAY 1:----------------------------------------------------------------------------------------------------------------------

LON-CL1--- win client
LON-DC1--- win server
LON-SVR1--- win server


PowerShell Gallery


Versioning:
x(major).x(minor).x(bug)


e.g. 1.0.0-----> minor ----> 1.1.0----> major



PowerShell:---automation solution

Command-line interface

accept & return ---- .NET objects

Consists:---

1. Command-line shell

feature:
tab completion & prediction
support commands & aliases
history
help system
pipeline (chaining of cmdlets)

2. Scripting language

complex/ repetitive tasks----> set of statements(scripts)

3. configuration management framework

DSC(Desired State Configuration)---> Infrastructure as code

declarative syntax(what?)

push or pull model to the deployment env.



PS Files Extensions:

1. script ----- .ps1
2. module----- .psm1
3. session conf---- .pssc1
4. role conf----- .psrc1
5. module def---- .psd1



PS Applications:----

1. PS Console App
2. PS ISE


Windows PS Vs PS Core(PowerShell)

PS1.0-PS5.1----> on the windows client & server OS.
built on .NET Framework
Windows PowerShell Versions---- by default available
1. PS Console App
2. PS ISE


PS6.0-PS7.4----> Win, LINUX, MacOS
build on .NET core
PowerShell Core Versions

Win:
1. PS Console App---5.1
2. PS ISE---5.1
3. PS core-- 7.4


Linux:
PS core--- 7.4

MACOS:
PS core--- 7.4


Developer Perspective:

VS Code editor + PowerShell extension

English-like language

PS Syntax:

1. verb-noun

2. verb-noun -parameter value

3. verb-noun -parameter value -parameter value

4. verb-noun -parameter value1, value2


verb---- action

fetch/display--- get,
update--- set
create----new


noun---- name (singular)
computer, process, service, resource


parameter---- begin the with -(dash) symbol
modify the action of cmdlet

value--- pass to the parameter



Types of Parameters:
1. Mandatory Parameters--required ones--- whenever the complete parameter set is not in the [] bracket
2. Optional Parameters-- not required ones--- whenever the complete parameter set is in the [] bracket
3. Positional --- whenever the name of the parameter is in [] bracket
4. Named --- whenever the name of the parameter is not in [] bracket




e.g

i) xyz [[-Name] <System.string[]>] ---- optional, positional

ii) xyz [-Name <System.string[]>] ---optional, named

iii) xyz [-Name] <System.string[]> ---- mandatory,positional

iv) xyz -Name <System.string[]> ---- mandatory, named




Using Cmdlet to explore PS:
1. get-command:  fetch /display the cmdlets

alias, functions, cmdlets

PS Gallery:--- all cmdlets

find-command

get-command -verb ...... -noun..............

get-command -noun .................

get-command -module ..............

2. get-verb: display all the verbs

3. get-alias: display all aliases 

4. get-help

get-help command-name
get-help command-name -detailed
get-help command-name -examples
get-help command-name -full
get-help command-name -online
get-help command-name -showwindow

update-help 

About Help Files

get-help about_*

get-help helpfilename

5. get-module

PS3.0---- autoloading

update-module -name .......

install-module -name ......

PSGallery:---- find-module

look path:--- $env:psmodulepath

6. get-member(gm): discover what object type, properties, methods of any cmdlets

syntax:-- cmdlets | get-member

PS---- Object oriented paradigm


e.g object
anything which exists in this real world.


Human---object

1. Attributes/ Properties: gender, name , age, contact,
2. Methods/ Behaviors: walk(), talk(), sleep(), eat(), dance()


CAR-----
Attributes: name, brand, model, color
Methods: start(), brake(), accelerate(), stop()


similar objects--- class


bicycle in the four wheeler class


Invoke the method
1. (cmdlet).method()
2. $var = cmdlet
 $var.method()


PS workflow?
1. search module
2. search native cmdlet / get-member(methods)
3. search the help of cmdlet
4. do administration



Module 2:

ADDS Administration


AD:--- store data as objects

AD objects

obj--- single element, user, group, device, app


Resources
Security principals

name & attributes


ADDS

automation
scalability
customization


Module:---- activedirectory

RSAT (Remote Server Administration Tool)

RSAT-AD-Powershell


prefix: ad in noun



****Server Management

Module : servermanager



**** N/w administration:
IP address, Routing 

Module: nettcpip

prefix: net in noun


DAY 2:----------------------------------------------------------------------------------------------------------------------

Day2 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


Module 3:---

Pipeline

series of commands connected by pipeline operator (|)

improve the performance & automate tasks

e.g. command 1 | command 2 | command 3   ----> single operation

one direction: left to right


Pros:
1. efficient data transfer

2. improve performance

3. conserve memory


Two techniques:
i) passing data byvalue
ii) passing data bypropertyname


Accept the Pipeline Input?

1. True---Yes    i)byvalue  ii)bypropertyname  iii) both(byvalue & bypropertyname)
2. False---No



***** Control the formatting of the pipeline o/p:

Formatting cmdlets:---

1. format-list(fl):---- list the properties of cmdlet
4 or more than 4 properties of the cmdlet

syntax:--- cmdlet | fl

2. format-table(ft):---- as a table(tabular format) row-object, col-property
4 or less 4 properties

cmdlet | ft

3. format-custom(fc):----alternative view 

cmdlet | fc

4. format-wide(fw):--- display single property in the single list displayed in multiple columns.

by default:---- two columns, -name property


syntax:--- cmdlet | fw

 or cmdlet | fw -property .............. -column ....




*****Manipulate the objects in Pipeline

measure, sort, select object.


1. Measure-object(measure)

by default--- count 


i. Numeric properties of the object---- sum, min, max, avg
ii. string properties of the object---- words, lines, char


e.g 78, 45,67, 34, 23


2. sort-object(sort)

sorting operation

two types:
i. ascending order (by default)

syntax:---
cmdlet | sort-object -property .............


ii. descending order

syntax:---
cmdlet | sort-object -property ............. -descending


3. Select-object(select)
select objects or object properties

cmdlet | select-object -property .....,.....,......

-first, -last, -unique



**** filter objects out of pipeline


Where-object(where or ?)

select objects from the collection based on their property values

conditions or criteria

true----kept
false---- removed


Conditional Operators

1. equals to                    =        -eq
2. not equals to               !=        -ne
3. greater than                 >         -gt
4. less than                    <         -lt
5. greater than or equals to   >=         -ge
6. less than or equals to      <=          -le

pattern matching     like      -like



1. Basic filter syntax


 cmdlet | where-object condition

Limitation:

i. does not support the property dereferencing.
ii. supports only single operation.



2. Advance filter syntax (Recommend)

Pros:
i.  support the property dereferencing.
ii. supports multiple operation(comparison). -and , -or


cmdlet | where -filterscript {$PSITEM/ $_ condition}



script:
Time complexity
Space complexity (less LoC)


*** Measure-command: cmdlets/ script block
measure the time (execution time)

measure-command { cmdlet/ script block }


**** enumerate objects in pipeline


Enumeration:
process of performing a task on each object one at a time in a collection


Foreach-object(foreach or %)

1. Basic syntax

cmdlet | foreach .........

2. Advance syntax


Range operator (..)

initial value.. final value



**** Send & pass data as o/p from the pipeline (pipeline object conversion in PS)

-outfile cmdlet

1. Text file (.txt)

cmdlet | out-file -path ...........txt


2. CSV file (.csv)
comma separated values

easy to manipulate & review data

MS Excel

i. Export-csv

ii. convertto-csv

3. XML file (.xml)
Extended Markup Language

<Tags>

Container tags(padded): <tags>...........</tags>
empty tags(non-padded): <tags>

i. Export-clixml

ii. Convertto-xml


4. JSON file (.json)
Java Script Object Notation

Azure ARM Template----.json

store data:

name/key : value pairs

i. convertto-json

cmdlet | convertto-json > path

text Redirection operator (>)

5. HTML file (.html)

Hypertext markup language--- HTML tags

<HTML>.......</HTML>

o/p in browser

i. convertto-html

cmdlet | convertto-html > path


*** Additional O/p options in PS:

i. out-printer
directly take the print or hard-copy of the PS cmdlet results.


cmdlet | out-printer  -----> default printer


cmdlet | out-printer -name ...........  -----> specific printer


ii. out-gridview
review, filter, sort, analyze o/p of the cmdlet--- don't want the permanent copy of the o/p


cmdlet | out-gridview

-outputmode 
1. none
2. single
3. multiple




*** how to create the custom property/ field:

1. rename the existing property name
2. create/derive the new property from the existing property


 @{name/n/label = .............. ; expression/exp/e = $_/$psitem.................}




Free% volumes----
 size remaining and total size


Free% = size remaining / total size * 100


**** Module 04

PS Provider/ provider:

adapter

connect your data store with PS Drive

hierarchical store

only single cmdlet---- get-psprovider


Supportsshouldprocess:

1. -whatif

2. -confirm



PS Drive / Drive: 
connection to the data store(root)


e.g Azure File share ----connect on-prem

New-PSDrive -Name Z -PSProvider FileSystem -Root "\\tzk2ddzm7gsoysardpvm.file.core.windows.net\fileshare1" -Persist




DAY 3:-----------------------------------------------------------------------------------------------------------------------

Day3 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


Module 05:----

CIM & WMI (both are related technologies)-----> DMTF(Distributed Management Task Force)

CIM: Common Information Model
WMI: Windows Management Instrumentation


connect to the common info repo which contains mgmt. information.

i) Query the data
ii) make the changes/manipulations/Invoke the methods


WMI:--- WBEM(Web-based enterprise management), older technology--- preliminary standards &
Proprietary technology
only supported on Windows Operating System (client, server)



CIM:--- newer technology--- based on open, cross platform standards
Windows, LINUX, MacOS


connect with Local computer & remote computer

WMI Repository


****CIM Cmdlets:
multiple protocols---> connectivity
COM: local communication
DCOM: old Proprietary (remote communication)---dynamic ports
WSMAN: remote comm. --- static ports
 Port 5985---WSMAN Listener (HTTP)--- by default
 Port 5986---Secure Listener (HTTPS)--- if certificate is available

3 Types of connection:

i) Local connections:  access & comm. with local computer repo

ii) Ad-hoc connections: (temporary) access & comm with remote computer repo
 -computername parameter

iii) CIM sessions: (Persistent/permanent) access & comm with remote computer repo

get-ciminstance -cimsession .......... -classname .............


****WMI Cmdlets

2 Types of connection:

i) Local connections:  access & comm. with local computer repo

ii) Ad-hoc connections: (temporary) access & comm with remote computer repo
 -computername parameter

session based connectivity is not possible.


CIM    Vs     WMI

CIM
1.cross platform
2. large no. of cmdlets
3. open standards
4. 3 types of connections
5. tab completion is possible


WMI
1.supported on win
2. less cmdlets
3. preliminary standards & Proprietary technology
4. 2 types of connections
5. tab completion is not possible



Repository info
h/w, s/w, h/w drivers, services, roles, process, user accounts, configurations


Query the data:

Workflow?
1. search for the appropriate class
2. decide CIM or WMI
3. use that technology



Filter instances:----

-filter parameter

condition

true---kept
false---remove


Conditional Operators

1. equals to                    =        -eq
2. not equals to               !=        -ne
3. greater than                 >         -gt
4. less than                    <         -lt
5. greater than or equals to   >=         -ge
6. less than or equals to      <=          -le


WQL(WMI Query Language):  WIM and CIM

subset of SQL


Employee table---- 1000 employees

sr.no empid  empname  department designation

Query: select * from tablename

select * from employee

select * from employee where empid = 10



Querying the data from the classes---->WQL

select * from classname

select * from classname  where condition


-query parameter



**** Invoke the method: make changes by using methods

action---performing on the object.

Direct Invocation:

get-member----methods

1. (cmdlet).method(..)

or

2. $var = cmdlet
 $var.method()


1. Invoke-wmimethod

Invoke-wmimethod -name .............. -argumentlist ...........

-argumentlist (system.object)

2. Invoke-cimmethod

Invoke-cimmethod -methodname .............. -arguments....

 -arguments (system.collection.idictionary)


@{key = value}


Module 06:

Variables:----


Limitation of Pipeline:  uni-directional (left to right)


store diff types of values & objects in memory

integer, string, Boolean, double etc.


PSDrive----- Variable:


Types of Variables:
1. User-defined variables:
created & maintained by the user.

2. Build-in Variable (default)
created & maintained by PowerShell.

i) Automatic variables:  store the state info of the PS.

e.g. $pshome, $psversiontable, $pwd

ii) Preference variables: store the user preferences for the PS.
populated with default values


syntax:

$varname = ......

can we use the special char in the name of the variables? Yes

${l@g} = .........

can we use the whitespaces ? Yes

${user name} = ..........


Explicitly define:

[int]$var = "80"


*****Array: data structure
store the multiple values or objects.


int, string, double, results of cmdlets etc.


on the basis of index no.

e.g. 5 items---- index no 4
1[0] 
2[1]
3[2]
4[3]
5[4]


access the particular item--- on the basis of index no.


Limitation:----
Fixed-size array (static)



***** Arraylists: data structure

store the multiple values or objects

stored & accessed on the basis of index no.

dynamic in nature

add or remove items


Methods:
i) add()----- add item

ii) remove()--- remove item

iii) removeat() ---- remove the item on the basis of index no


syntax

[System.collections.arraylist]$arraylist = ...........,............,..............


**** Hash Tables/ Dictionary/ Associative Array

Data structure

multiple values/ items

store & access the items---on the basis of index number


key/name -value pair

key(string)---unique identifier

e.g. 

computername - ipaddress or vice-versa


Create Hash Table:
1. begin with @ sign
2. enclose in {} braces
3. = sign to separate each key from its value
4. ; line break to separate key-value pair


syntax:----

@{key=value; key1=value}


store the Hash table in the variable:

$hash = @{key=value; key1=value}
$hash

operations:----
$hash.add()
$hash.remove()
$hash.removeat()


Two Types of Hash Tables:---

1. Unordered Hash Table (By default)
PS1.0 & PS2.0

@{key=value; key1=value}

2. Ordered Hash Table
PS3.0

[ordered]@{key=value; key1=value}



TasK:-----

1. prefer to use the native cmdlet

2. search the method using the get-member

3. Use .NET framework classes


[]::method()
[]::property



DAY 4:----------------------------------------------------------------------------------------------------------------------

Day4 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma



Module07:---- PS Scripting

scripting is all about automation.

Complex tasks or Repetitive tasks


process of writing the set of statements in PS language & storing those statements in a text file with .ps1 extension.


Benefits:
1. Saves time
2. Automation
3. less chances of errors
4. Customization
5. improved efficiency, performance, consistency
6. saving cost
7. Reusability



Scripts Components:
1. Module
2. Cmdlets
3. Variables
4. Array
5. Arraylist
6. hash tables
7. scripting constructs (flow control, looping, jumping)
8. Parameters
9. Functions
10. error handling & troubleshooting
11. signing a script



****Execution Policy

local computer, current user or particular session



i. Undefined: win client--restricted , win server--remotesigned
ii. unrestricted: non-win computers
iii. restricted: win client computers  (.ps1,.psm1,.ps1xml)
iv. allsigned: signed by the creator
v. remotesigned: win server computers --- digital sign
vi. bypass
vii. default
restricted: win client computers
remotesigned: win server computers







Best Practices:
use # comments


7. scripting constructs (flow control, looping, jumping)

i) Flow control: manage inputs & execution flow 

I. If construct

if(condition)True
{
//statement
}


II. If else 

if(condition)True/False
{
//statement
}
else
{
//statement
}


III. If else If

if(condition)True/False
{
//statement
}
elseif(condition)
{
//statement
}
else
{
//statement
}


IV. Switch 

switch(exp)
{
case1 action
case2 action
.
.
casen  action
default action
}


ii. Looping constructs: iterative or repetitive tasks


I. While loop : Pre-condition check loop

while(condition)
{
//statements
}

1
2
3
4
5

II. Do while loop: Post-condition check loop

do
{
//statements
}
while(condition)


III. for loop

for($initialcounter; condition; updatecounter)
{
//statements
}


Infinite for loop

for(; ;)
{
//statements
}



IV. foreach

foreach($var in $array)
{
//statement
}



iii) Jumping Constructs

I. Break: stop the execution

break

II. continue: skip the execution of the loop

continue


Task: create the 5 folders with your name on the C:\----------- flavius1,flavius2....Flavius5

looping construct
for


Task: create a folder -----victor2024-12-19 02-32-00-AM



Write-Host

Write-output


**** accept the input from the user

Read-host


8. Parameters

param()



validation rules


9. Functions: block of reusable code

is a list of PS statements that has a name which we assign


function function-name
{
//statements
}


**** Error

diff or deviation b/w actual o/p and the expected o/p


Reasons:----
1. syntax error
2. logical error
3. typo error
4. query the object which does not exist
5. comm. with the m/c which is offline


1. terminating error
2. non-terminating error


Try-catch-Finally



try
{
//statement
}
catch
{
}
finally
{
}

$error---automatic error



**** Troubleshooting a script

Breakpoints

1) console

command, Line, Variable

2) ISE

Line 



**** sign a script

Encryption ----plain text in to the cipher text
Decryption ---- cipher text in to plain text

key: public key 
private key

i. symmetric : E & D --- same key
ii. asymmetric : E(private) --D (public) or vice-versa

Hash functions


Digital certificate

CA(Certificate Authority)


i) trusted third party CA
ii) Internal CA



Two steps:
1. install code signing certificate
2. sign the script


**** ISE Steroid


Module 08:

Remoting

Various technologies:---
WMI
CIM

-computername

WSMAN: remote comm. --- static ports
 Port 5985---WSMAN Listener (HTTP)--- by default
 Port 5986---Secure Listener (HTTPS)--- if certificate is available


-computername

Remoting:
1. one-to-one
2. one-to-many





Throttling
by default, only 32 computer at once


-throttlelimit 100

factors:
utilize more bandwidth
more CPU
More RAM


1-32, 33-64
33-100---- queue


Persistent Connection/ Sessions/PSsession



PS3.0--- $using:


DAY 5:----------------------------------------------------------------------------------------------------------------------

Day5 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


FF Link:
https://rms.koenig-solutions.com/Feedback/FinalFeedback.aspx?d=oETKMOrCR7lXUf0UgMFBStY/qP5hcpA2Lvfnly+9omM=

MTM Link:
https://www.metricsthatmatter.com/url/u.aspx?2493B31DC217511303


Module 11:-----

Jobs

1. Background Jobs

Three types:

i. Local jobs: on the local computer 

access the local resource

cmdlet: start-job -scriptblock { cmdlet }

ii. Remote jobs: on the remote computer

access the remote resource

invoke-command -computername .......... -scriptblock {cmdlet} -asjob -jobname ..........

iii. CIM/WMI jobs: local & remote computer

access the local/remote resource

CIM Job:--- start-job

2. Scheduled Jobs

Win PS background jobs + task schedular tasks




Module 09:---

Azure Administration with PS:-----


Cloud or Hybrid

Services:---- simple to complex service

IaaS, PaaS, SaaS

PAYG(pay as you go model)

shared responsibility
IaaS:  greater control---> VM
SaaS: least control


Azure Account
Managment Group
Subscription
Resource Group
Resource (IaaS, SaaS, PaaS)


GUI Web app--- portal.azure.com



region--- Cost
 70+ region


ARM(Azure resource Manager)

resource Providers:---- VM---Microsoft.compute

webapp---- Microsoft.web




WHY PS?

Automation
repetitive task
review all configurations




**** Cloud Shell: browser based shell

firstly you need to create the storage account for this shell

IaC---- ARM Template(.json), Bicep file(.bicep)

pre-configured

SaaS ---- managed service

two environments:---
1. PowerShell
2. Bash 

prefix: az in the noun


Azure PowerShell:--- extension of PS

2018--- az module


update-module -name az

install-module -name az


Pre-requisite:-----

1. computer
win
Linux
MacOS

2. Install PS Base product

Win--- PS5.1(Win PS), PS Core(6.0-latest)

Linux---PS Core(6.0-latest)

MacOS---PS Core(6.0-latest)

3. Install Az module from PS gallery

install-module -name az

4. Sign-in/ connect with your account

5. do administration



Module 10:----

Microsoft 365 services administration with PS

1. Entra ID (former name-- Azure AD)

module: Microsoft.graph

User---assign a license(exchange online service plan)

2. Exchange online

Module: exchangeonlinemanagement

3. SharePoint online

Module: Microsoft.online.sharepoint.powershell

4. Microsoft Teams

Module: Microsoftteams

M@r!@n1234



update-module .............


CBH:---

Platyps module


create markdown help

external help---- XML file


About file

create markdownabouthelp 

external help


