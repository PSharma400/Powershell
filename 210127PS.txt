210127---> AZ-040T00: Automating Administration with PowerShell

Day1 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


LET Portal(Student Portal) Login: Training details are available on this portal (Meeting Links, Recording Links, Reference Links, Qubits etc.)
      Link:----- https://www.mykoenig.com/
      Credentials Details:---- Email ID: Your Corporate Email ID, Password: 210127

Achievement URL:
 https://learn.microsoft.com/en-us/users/me/achievements?WT.mc_id=ilt_partner_webpage_wwl&ocid=3351797&redeem=LMYPMV



DAY 1:----------------------------------------------------------------------------------------------------------------------

LON-CL1--- win client
LON-DC1--- win server
LON-SVR1--- win server


PowerShell Gallery


Versioning:
x(major).x(minor).x(bug)


e.g. 1.0.0-----> minor ----> 1.1.0----> major



PowerShell:---automation solution

Command-line interface

accept & return ---- .NET objects

Consists:---

1. Command-line shell

feature:
tab completion & prediction
support commands & aliases
history
help system
pipeline (chaining of cmdlets)

2. Scripting language

complex/ repetitive tasks----> set of statements(scripts)

3. configuration management framework

DSC(Desired State Configuration)---> Infrastructure as code

declarative syntax(what?)

push or pull model to the deployment env.



PS Files Extensions:

1. script ----- .ps1
2. module----- .psm1
3. session conf---- .pssc1
4. role conf----- .psrc1
5. module def---- .psd1



PS Applications:----

1. PS Console App
2. PS ISE


Windows PS Vs PS Core(PowerShell)

PS1.0-PS5.1----> on the windows client & server OS.
built on .NET Framework
Windows PowerShell Versions---- by default available
1. PS Console App
2. PS ISE


PS6.0-PS7.4----> Win, LINUX, MacOS
build on .NET core
PowerShell Core Versions

Win:
1. PS Console App---5.1
2. PS ISE---5.1
3. PS core-- 7.4


Linux:
PS core--- 7.4

MACOS:
PS core--- 7.4


Developer Perspective:

VS Code editor + PowerShell extension

English-like language

PS Syntax:

1. verb-noun

2. verb-noun -parameter value

3. verb-noun -parameter value -parameter value

4. verb-noun -parameter value1, value2


verb---- action

fetch/display--- get,
update--- set
create----new


noun---- name (singular)
computer, process, service, resource


parameter---- begin the with -(dash) symbol
modify the action of cmdlet

value--- pass to the parameter



Types of Parameters:
1. Mandatory Parameters--required ones--- whenever the complete parameter set is not in the [] bracket
2. Optional Parameters-- not required ones--- whenever the complete parameter set is in the [] bracket
3. Positional --- whenever the name of the parameter is in [] bracket
4. Named --- whenever the name of the parameter is not in [] bracket




e.g

i) xyz [[-Name] <System.string[]>] ---- optional, positional

ii) xyz [-Name <System.string[]>] ---optional, named

iii) xyz [-Name] <System.string[]> ---- mandatory,positional

iv) xyz -Name <System.string[]> ---- mandatory, named




Using Cmdlet to explore PS:
1. get-command:  fetch /display the cmdlets

alias, functions, cmdlets

PS Gallery:--- all cmdlets

find-command

get-command -verb ...... -noun..............

get-command -noun .................

get-command -module ..............

2. get-verb: display all the verbs

3. get-alias: display all aliases 

4. get-help

get-help command-name
get-help command-name -detailed
get-help command-name -examples
get-help command-name -full
get-help command-name -online
get-help command-name -showwindow

update-help 

About Help Files

get-help about_*

get-help helpfilename

5. get-module

PS3.0---- autoloading

update-module -name .......

install-module -name ......

PSGallery:---- find-module

look path:--- $env:psmodulepath

6. get-member(gm): discover what object type, properties, methods of any cmdlets

syntax:-- cmdlets | get-member

PS---- Object oriented paradigm


e.g object
anything which exists in this real world.


Human---object

1. Attributes/ Properties: gender, name , age, contact,
2. Methods/ Behaviors: walk(), talk(), sleep(), eat(), dance()


CAR-----
Attributes: name, brand, model, color
Methods: start(), brake(), accelerate(), stop()


similar objects--- class


bicycle in the four wheeler class


Invoke the method
1. (cmdlet).method()
2. $var = cmdlet
 $var.method()


PS workflow?
1. search module
2. search native cmdlet / get-member(methods)
3. search the help of cmdlet
4. do administration



Module 2:

ADDS Administration


AD:--- store data as objects

AD objects

obj--- single element, user, group, device, app


Resources
Security principals

name & attributes


ADDS

automation
scalability
customization


Module:---- activedirectory

RSAT (Remote Server Administration Tool)

RSAT-AD-Powershell


prefix: ad in noun



****Server Management

Module : servermanager



**** N/w administration:
IP address, Routing 

Module: nettcpip

prefix: net in noun


DAY 2:----------------------------------------------------------------------------------------------------------------------

Day2 Attendance Link:
https://rms-new.netlify.app/third_party?batch_header=210127
Use Your Corporate E-mail Address
Trainer Name: Pooja Sharma


Module 3:---

Pipeline

series of commands connected by pipeline operator (|)

improve the performance & automate tasks

e.g. command 1 | command 2 | command 3   ----> single operation

one direction: left to right


Pros:
1. efficient data transfer

2. improve performance

3. conserve memory


Two techniques:
i) passing data byvalue
ii) passing data bypropertyname


Accept the Pipeline Input?

1. True---Yes    i)byvalue  ii)bypropertyname  iii) both(byvalue & bypropertyname)
2. False---No



***** Control the formatting of the pipeline o/p:

Formatting cmdlets:---

1. format-list(fl):---- list the properties of cmdlet
4 or more than 4 properties of the cmdlet

syntax:--- cmdlet | fl

2. format-table(ft):---- as a table(tabular format) row-object, col-property
4 or less 4 properties

cmdlet | ft

3. format-custom(fc):----alternative view 

cmdlet | fc

4. format-wide(fw):--- display single property in the single list displayed in multiple columns.

by default:---- two columns, -name property


syntax:--- cmdlet | fw

 or cmdlet | fw -property .............. -column ....




*****Manipulate the objects in Pipeline

measure, sort, select object.


1. Measure-object(measure)

by default--- count 


i. Numeric properties of the object---- sum, min, max, avg
ii. string properties of the object---- words, lines, char


e.g 78, 45,67, 34, 23


2. sort-object(sort)

sorting operation

two types:
i. ascending order (by default)

syntax:---
cmdlet | sort-object -property .............


ii. descending order

syntax:---
cmdlet | sort-object -property ............. -descending


3. Select-object(select)
select objects or object properties

cmdlet | select-object -property .....,.....,......

-first, -last, -unique



**** filter objects out of pipeline


Where-object(where or ?)

select objects from the collection based on their property values

conditions or criteria

true----kept
false---- removed


Conditional Operators

1. equals to                    =        -eq
2. not equals to               !=        -ne
3. greater than                 >         -gt
4. less than                    <         -lt
5. greater than or equals to   >=         -ge
6. less than or equals to      <=          -le

pattern matching     like      -like



1. Basic filter syntax


 cmdlet | where-object condition

Limitation:

i. does not support the property dereferencing.
ii. supports only single operation.



2. Advance filter syntax (Recommend)

Pros:
i.  support the property dereferencing.
ii. supports multiple operation(comparison). -and , -or


cmdlet | where -filterscript {$PSITEM/ $_ condition}



script:
Time complexity
Space complexity (less LoC)


*** Measure-command: cmdlets/ script block
measure the time (execution time)

measure-command { cmdlet/ script block }


**** enumerate objects in pipeline


Enumeration:
process of performing a task on each object one at a time in a collection


Foreach-object(foreach or %)

1. Basic syntax

cmdlet | foreach .........

2. Advance syntax


Range operator (..)

initial value.. final value



**** Send & pass data as o/p from the pipeline (pipeline object conversion in PS)

-outfile cmdlet

1. Text file (.txt)

cmdlet | out-file -path ...........txt


2. CSV file (.csv)
comma separated values

easy to manipulate & review data

MS Excel

i. Export-csv

ii. convertto-csv

3. XML file (.xml)
Extended Markup Language

<Tags>

Container tags(padded): <tags>...........</tags>
empty tags(non-padded): <tags>

i. Export-clixml

ii. Convertto-xml


4. JSON file (.json)
Java Script Object Notation

Azure ARM Template----.json

store data:

name/key : value pairs

i. convertto-json

cmdlet | convertto-json > path

text Redirection operator (>)

5. HTML file (.html)

Hypertext markup language--- HTML tags

<HTML>.......</HTML>

o/p in browser

i. convertto-html

cmdlet | convertto-html > path


*** Additional O/p options in PS:

i. out-printer
directly take the print or hard-copy of the PS cmdlet results.


cmdlet | out-printer  -----> default printer


cmdlet | out-printer -name ...........  -----> specific printer


ii. out-gridview
review, filter, sort, analyze o/p of the cmdlet--- don't want the permanent copy of the o/p


cmdlet | out-gridview

-outputmode 
1. none
2. single
3. multiple




*** how to create the custom property/ field:

1. rename the existing property name
2. create/derive the new property from the existing property


 @{name/n/label = .............. ; expression/exp/e = $_/$psitem.................}




Free% volumes----
 size remaining and total size


Free% = size remaining / total size * 100


**** Module 04

PS Provider/ provider:

adapter

connect your data store with PS Drive

hierarchical store

only single cmdlet---- get-psprovider


Supportsshouldprocess:

1. -whatif

2. -confirm



PS Drive / Drive: 
connection to the data store(root)


e.g Azure File share ----connect on-prem

New-PSDrive -Name Z -PSProvider FileSystem -Root "\\tzk2ddzm7gsoysardpvm.file.core.windows.net\fileshare1" -Persist


